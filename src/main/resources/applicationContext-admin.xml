<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
       default-lazy-init="true">

    <context:component-scan base-package="com.hnczb">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- enable autowire -->
    <context:annotation-config/>

   <import resource="applicationContext-atomikos.xml"/>


    <task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>

    <task:executor id="myExecutor" pool-size="5"/>
    <task:scheduler id="myScheduler" pool-size="10"/>

    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="jdkSerializationRedisSerializer"
          class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

    <!-- Redis Session -->
    <bean id="redisSessionTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="jdkSerializationRedisSerializer"/>
        <property name="hashValueSerializer" ref="jdkSerializationRedisSerializer"/>
        <property name="defaultSerializer" ref="stringRedisSerializer"/>
        <property name="connectionFactory" ref="redisSessionConnectionFactory"/>
    </bean>

    <bean id="redisSessionPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.session.pool.maxTotal}"/>
        <property name="maxIdle" value="${redis.session.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.session.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.session.pool.testOnBorrow}"/>
    </bean>


    <bean id="redisSessionConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.session.ip}"/>
        <property name="port" value="${redis.session.port}"/>
        <property name="usePool" value="${redis.session.usePool}"/>
        <property name="poolConfig" ref="redisSessionPoolConfig"/>
    </bean>


    <bean id="sessionRepository" class="org.springframework.session.data.redis.RedisOperationsSessionRepository">
        <constructor-arg ref="redisSessionTemplate"/>
        <property name="defaultMaxInactiveInterval" value="${redis.session.expiration}"/>
    </bean>

    <bean name="springSession" class="org.springframework.session.web.http.SessionRepositoryFilter">
        <constructor-arg ref="sessionRepository"></constructor-arg>
    </bean>


    <!-- Redis Cache Config -->
    <bean id="redisCachePoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.cache.pool.maxTotal}"/>
        <property name="maxIdle" value="${redis.cache.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.cache.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.cache.pool.testOnBorrow}"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="jdkSerializationRedisSerializer"/>
        <property name="hashValueSerializer" ref="jdkSerializationRedisSerializer"/>
        <property name="defaultSerializer" ref="stringRedisSerializer"/>
        <property name="connectionFactory" ref="redisCacheConnectionFactory"/>
    </bean>

    <bean id="redisCacheConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.cache.ip}"/>
        <property name="port" value="${redis.cache.port}"/>
        <property name="usePool" value="${redis.cache.usePool}"/>
        <property name="poolConfig" ref="redisCachePoolConfig"/>
    </bean>

    <bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    </bean>

    <!-- shiro验证配置文件-->
    <import resource="applicationContext-shiro.xml"/>

    <!--&lt;!&ndash; feature环境配置 &ndash;&gt;-->
    <!--<beans profile="feature">-->
        <!--<context:property-placeholder-->
                <!--ignore-resource-not-found="true"-->
                <!--location="classpath*:application-admin.feature.properties"/>-->
    <!--</beans>-->

    <!-- 开发环境配置 -->
    <beans profile="development">
        <context:property-placeholder
                ignore-resource-not-found="true"
                location="classpath*:application-admin.development.properties"/>
    </beans>

    <!--&lt;!&ndash; 测试环境配置 &ndash;&gt;-->
    <!--<beans profile="test">-->
        <!--<context:property-placeholder-->
                <!--ignore-resource-not-found="true"-->
                <!--location="classpath*:application-admin.test.properties"/>-->
    <!--</beans>-->

    <!--&lt;!&ndash; 生产环境配置 &ndash;&gt;-->
    <!--<beans profile="production">-->
        <!--<context:property-placeholder-->
                <!--ignore-resource-not-found="true"-->
                <!--location="classpath*:application-admin.production.properties"/>-->
    <!--</beans>-->
</beans>